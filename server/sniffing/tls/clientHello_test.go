package tls

import (
	"strconv"
	"strings"
	"testing"
)

// go test -v -run TestUnmarshal  -tags "dev"
func TestUnmarshal(t *testing.T) {
	bufff := strings.Fields("22 3 1 7 62 1 0 7 58 3 3 249 175 102 12 208 188 201 74 248 169 125 150 127 52 106 216 235 104 119 45 205 68 245 40 246 64 138 125 160 75 147 176 32 34 159 134 91 204 169 166 12 156 97 140 68 247 93 177 225 70 48 3 152 82 133 222 237 213 150 161 17 138 133 236 50 0 32 122 122 19 1 19 2 19 3 192 43 192 47 192 44 192 48 204 169 204 168 192 19 192 20 0 156 0 157 0 47 0 53 1 0 6 209 74 74 0 0 0 43 0 7 6 10 10 3 4 3 3 0 5 0 5 1 0 0 0 0 0 13 0 18 0 16 4 3 8 4 4 1 5 3 8 5 5 1 8 6 6 1 255 1 0 1 0 0 16 0 14 0 12 2 104 50 8 104 116 116 112 47 49 46 49 0 23 0 0 0 10 0 12 0 10 154 154 17 236 0 29 0 23 0 24 254 13 0 218 0 0 1 0 1 204 0 32 203 39 52 140 131 132 219 210 251 115 10 113 79 97 50 232 174 18 64 145 233 56 148 160 118 70 63 207 158 238 78 97 0 176 147 84 89 115 31 145 214 56 242 67 242 103 209 108 64 53 52 110 169 55 144 85 105 240 172 66 236 151 184 187 124 118 218 115 100 221 132 219 173 24 205 85 84 95 187 119 65 184 85 50 136 187 115 141 3 231 81 76 113 55 112 138 191 133 69 141 187 112 194 236 71 244 253 171 53 254 101 185 219 46 229 255 60 254 183 134 154 70 127 67 29 83 82 119 68 125 170 223 209 175 61 111 206 161 65 122 205 83 244 109 81 227 122 148 71 24 201 201 112 95 118 235 186 125 124 108 234 188 66 207 2 60 107 241 69 145 139 40 3 21 198 203 158 158 54 188 98 142 161 6 187 187 211 131 19 137 17 7 132 55 60 139 127 161 15 143 106 11 105 119 133 192 141 85 79 15 0 18 0 0 0 0 0 18 0 16 0 0 13 109 98 100 46 98 97 105 100 117 46 99 111 109 0 45 0 2 1 1 0 35 0 104 40 230 154 117 204 144 164 100 157 217 236 36 44 0 10 62 91 47 104 200 58 63 87 146 209 217 165 42 77 241 145 89 229 9 141 44 147 12 67 139 17 129 186 22 92 154 174 244 119 26 76 75 50 47 90 199 114 92 54 183 175 102 96 38 143 206 199 246 116 106 45 189 227 244 40 204 20 193 117 205 119 27 221 200 81 115 216 44 174 125 136 54 14 46 13 22 57 189 113 58 162 139 113 102 0 27 0 3 2 0 2 0 11 0 2 1 0 0 51 4 239 4 237 154 154 0 1 0 17 236 4 192 248 240 147 46 185 74 54 231 112 136 112 88 71 124 123 140 171 145 112 68 102 145 22 46 255 43 22 163 161 159 145 181 88 205 12 105 155 218 135 51 55 151 93 170 104 174 1 58 213 39 93 82 11 173 142 147 121 97 12 187 167 240 23 47 250 111 181 20 103 141 52 188 55 35 123 236 183 55 205 227 82 138 225 84 86 245 31 243 240 17 111 83 105 157 92 194 165 85 116 51 208 180 162 164 109 167 87 105 161 119 141 217 70 65 102 183 95 99 218 137 74 145 36 44 92 20 181 68 59 21 201 107 116 227 60 206 211 125 188 241 119 20 36 186 58 16 190 173 106 84 74 51 130 206 75 24 81 74 0 30 119 110 147 42 159 88 101 1 61 80 81 193 149 150 228 115 141 210 32 183 160 192 89 121 12 74 122 64 31 32 186 59 100 213 174 207 172 122 71 180 125 210 123 78 86 66 128 92 41 135 233 27 104 202 90 197 129 250 85 150 134 27 178 179 69 144 116 95 241 72 69 79 218 162 11 88 35 155 192 149 156 177 96 19 84 189 152 10 118 127 235 136 148 153 63 227 245 200 56 8 65 157 73 206 77 99 91 26 23 81 154 194 8 135 106 137 32 177 16 60 154 73 112 146 106 63 245 173 138 81 91 75 219 149 67 122 205 179 228 163 111 23 108 77 129 207 125 40 139 146 10 187 168 91 47 108 3 95 166 70 71 164 229 76 251 247 44 205 89 108 131 240 132 71 27 179 12 60 83 166 67 5 63 229 28 17 227 14 230 128 2 65 96 170 44 226 118 90 20 3 155 9 61 78 50 191 54 108 176 170 66 46 146 231 52 246 197 76 23 213 92 81 209 78 156 113 73 7 80 77 250 64 135 191 85 182 82 114 61 109 168 96 45 58 58 46 166 166 212 129 134 240 104 6 118 231 80 80 137 76 3 180 93 83 108 19 28 183 199 211 27 131 70 3 167 102 105 154 1 21 153 246 224 24 18 99 70 56 195 102 7 224 73 44 76 129 4 140 34 156 144 43 232 215 137 148 152 60 60 227 183 232 33 12 192 220 170 191 137 155 178 18 181 156 21 15 85 67 122 198 53 166 0 105 200 105 188 184 42 8 121 216 72 75 199 118 32 14 149 41 99 96 136 111 252 151 61 89 86 168 116 167 11 149 143 10 113 35 5 103 19 28 180 111 79 216 55 34 246 63 37 37 178 101 226 141 64 164 206 138 183 14 224 137 60 18 92 86 61 11 141 18 26 184 122 114 26 128 71 111 181 247 188 60 71 163 139 6 51 136 51 90 31 67 29 10 200 149 35 192 99 99 202 23 57 248 139 121 4 37 47 83 124 65 234 105 68 249 136 131 245 104 137 50 30 31 3 37 28 247 71 67 212 4 212 245 200 180 132 179 5 121 53 230 139 184 151 92 91 149 252 62 183 122 156 132 133 71 99 192 203 236 32 116 92 229 120 22 26 144 155 188 87 59 52 61 107 67 100 163 27 61 150 184 99 4 197 109 6 42 4 148 116 46 201 181 97 12 168 101 250 136 63 236 219 84 140 155 53 79 103 92 124 218 42 54 37 13 83 140 29 191 84 127 64 37 181 8 232 91 241 87 113 122 114 189 104 219 33 110 9 46 213 133 26 172 113 142 196 69 67 82 144 51 31 99 100 152 194 75 154 129 52 48 40 77 224 227 23 104 74 109 46 1 49 29 170 4 255 251 0 243 120 34 158 18 52 144 92 104 85 55 29 55 235 62 36 168 76 226 97 167 15 27 114 134 201 63 15 150 88 210 244 183 113 24 177 21 134 117 123 240 106 195 244 39 97 87 66 158 105 83 95 116 22 246 99 4 126 176 53 142 16 98 246 128 131 20 60 56 111 136 7 179 12 26 226 232 74 82 180 35 213 134 88 160 5 72 83 130 7 180 248 113 137 235 65")
	buf := []byte{}
	for _, v := range bufff {
		byteInt, _ := strconv.Atoi(v)
		buf = append(buf, byte(byteInt))
	}

	// ggg:=&ClientHelloMsg{}

	t.Log(string(buf))
}
